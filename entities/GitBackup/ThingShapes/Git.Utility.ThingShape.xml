<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b103"
 majorVersion="8"
 minorVersion="5"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="5"
 schemaVersion="1054"
 universal="password">
    <ThingShapes>
        <ThingShape
         aspect.isEditableExtensionObject="true"
         aspect.isExtension="true"
         className=""
         description="This Utility shape is used to add useful js functionality to the GitBackup Things."
         documentationContent=""
         homeMashup=""
         lastModifiedDate="2020-06-24T19:58:40.422Z"
         name="Git.Utility.ThingShape"
         projectName="GitBackup"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description="functionality that allows exporting data from the Project DataTables/Streams/ValueStreams"
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ExportProjectData">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="ProjectName"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetConfiguration">
                    <ResultType
                     aspect.dataShape="GitBackup.Configuration.DataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetFilteredDirectoryListing">
                    <ResultType
                     aspect.dataShape="FileSystemDirectory"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetRepoPathName">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetRepositoryName">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="HasRows">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="INFOTABLE"
                         description=""
                         name="infotable"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="QueryDiffFileList">
                    <ResultType
                     aspect.dataShape="GitBackup.CommitChangedFiles.DataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="CommitID"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="FileName"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="QueryStatus">
                    <ResultType
                     aspect.dataShape="Git.Status.DataShape"
                     baseType="INFOTABLE"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="STRING"
                         description=""
                         name="SearchTerm"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category=""
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RemoveEntityHistoryInfo">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ExportProjectData">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params_DataTables = {
                                        searchExpression: "*" /* STRING */ ,
                                        types: {
                                            "items": ["Thing"]
                                        } /* JSON */ ,
                                        withPermissions: true /* BOOLEAN */ ,
                                        searchDescriptions: true /* BOOLEAN */ ,
                                        thingShapes: {
                                            "items": ["DataTable"]
                                        } /* JSON */ ,
                                        projectName: ProjectName /* PROJECTNAME */
                                    };
                                    
                                    // result: INFOTABLE dataShape: SpotlightSearch
                                    var iftbl_DataTables = Resources["SearchFunctions"].SpotlightSearch(params_DataTables);
                                    
                                    var params_Streams = {
                                        searchExpression: "*" /* STRING */ ,
                                        types: {
                                            "items": ["Thing"]
                                        } /* JSON */ ,
                                        withPermissions: true /* BOOLEAN */ ,
                                        searchDescriptions: true /* BOOLEAN */ ,
                                        thingShapes: {
                                            "items": ["Stream"]
                                        } /* JSON */ ,
                                        projectName: ProjectName /* PROJECTNAME */
                                    };
                                    
                                    // result: INFOTABLE dataShape: SpotlightSearch
                                    var iftbl_Streams = Resources["SearchFunctions"].SpotlightSearch(params_Streams);
                                    var params_ValueStreams = {
                                        searchExpression: "*" /* STRING */ ,
                                        types: {
                                            "items": ["Thing"]
                                        } /* JSON */ ,
                                        withPermissions: true /* BOOLEAN */ ,
                                        searchDescriptions: true /* BOOLEAN */ ,
                                        thingShapes: {
                                            "items": ["ValueStream"]
                                        } /* JSON */ ,
                                        projectName: ProjectName /* PROJECTNAME */
                                    };
                                    
                                    // result: INFOTABLE dataShape: SpotlightSearch
                                    var iftbl_ValueStreams = Resources["SearchFunctions"].SpotlightSearch(params_ValueStreams);
                                    var params_Wiki = {
                                        searchExpression: "*" /* STRING */ ,
                                        types: {
                                            "items": ["Thing"]
                                        } /* JSON */ ,
                                        withPermissions: true /* BOOLEAN */ ,
                                        searchDescriptions: true /* BOOLEAN */ ,
                                        thingShapes: {
                                            "items": ["Wiki"]
                                        } /* JSON */ ,
                                        projectName: ProjectName /* PROJECTNAME */
                                    };
                                    
                                    // result: INFOTABLE dataShape: SpotlightSearch
                                    var iftbl_Wikis = Resources["SearchFunctions"].SpotlightSearch(params_Wiki);
                                    var params_Blogs = {
                                        searchExpression: "*" /* STRING */ ,
                                        types: {
                                            "items": ["Thing"]
                                        } /* JSON */ ,
                                        withPermissions: true /* BOOLEAN */ ,
                                        searchDescriptions: true /* BOOLEAN */ ,
                                        thingShapes: {
                                            "items": ["Blog"]
                                        } /* JSON */ ,
                                        projectName: ProjectName /* PROJECTNAME */
                                    };
                                    
                                    // result: INFOTABLE dataShape: SpotlightSearch
                                    var iftbl_Blogs = Resources["SearchFunctions"].SpotlightSearch(params_Blogs);
                                    
                                    var result1 = Resources["InfoTableFunctions"].Union({
                                        t1: iftbl_DataTables,
                                        t2: iftbl_Streams
                                    });
                                    var result2 = Resources["InfoTableFunctions"].Union({
                                        t1: result1,
                                        t2: iftbl_ValueStreams
                                    });
                                    var result3 = Resources["InfoTableFunctions"].Union({
                                        t1: result2,
                                        t2: iftbl_Wikis
                                    });
                                    var iftbl_DataEntities = Resources["InfoTableFunctions"].Union({
                                        t1: result3,
                                        t2: iftbl_Blogs
                                    });
                                    //After finishing aggregation, we tag all data entities to have a common tag to allow exporting by that tag 
                                    var tableLength = iftbl_DataEntities.rows.length;
                                    var hh=0;
                                    for (var x = 0; x < tableLength; x++) {
                                        var row = iftbl_DataEntities.rows[x];
                                        var jsonExistingTagsArray = Things[row.name].GetTags();
                                        var boolContainsTag = false;
                                        for (var y = 0; y < jsonExistingTagsArray.length; y++) {
                                            if (jsonExistingTagsArray[y] == "Applications:" + ProjectName) {
                                                boolContainsTag = true;hh++;
                                            }
                                        }
                                        if (boolContainsTag === false)
                                            Things[row.name].AddTags({
                                                tags: "Applications:" + ProjectName
                                            });
                                    }
                                    //we get configuration data
                                    var iftbl_ConfigurationRow = me.GetConfiguration().getRow(0);
                                    var target = Things["ExtensionImportTargets"].importTargets.getRow(0);
                                    var ExportURL = target.baseURL + "/DataExporter?Accept=" + encodeURIComponent("application/octet-stream") + "&path=" + encodeURIComponent(iftbl_ConfigurationRow.FileRepoPath) + "&repositoryName=" + encodeURIComponent(iftbl_ConfigurationRow.FileRepository) + "&searchTags=" + encodeURIComponent("Applications:" + ProjectName);
                                    var params2 = {
                                        headers: {
                                            "appKey": target.appKey
                                        } /* JSON */ ,
                                        ignoreSSLErrors: true /* BOOLEAN */ ,
                                        url: ExportURL /* STRING */
                                    };
                                    
                                    // result: STRING
                                    var str_ExportResult = Resources["ContentLoaderFunctions"].GetText(params2);
                                    var str_TaskID = str_ExportResult.match(/(Task-)\w+/g);
                                    var bool_IsFound = false;
                                    var iftbl_IsDone;
                                    
                                    while (bool_IsFound === false) {
                                         iftbl_IsDone = Logs["ApplicationLog"].QueryLogEntries({
                                            maxItems: 1 /* NUMBER */ ,
                                            searchExpression: "*" + str_TaskID +"*"+"done"+"*"/* STRING */
                                        });
                                        if (iftbl_IsDone.getRowCount() > 0) {
                                            bool_IsFound = true;
                                        }
                                        pause(1000);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetConfiguration">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                        infoTableName : "InfoTable",
                                        dataShapeName : "GitBackup.Configuration.DataShape"
                                    };
                                    var iftbl_Cfg =  me.GetConfigurationTable({
                                    	tableName: "Configuration" /* STRING */
                                    });
                                    // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(GitBackup.Configuration.DataShape)
                                    var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                    // GitBackup.Configuration.DataShape entry object
                                    var row= iftbl_Cfg.getRow(0);
                                    var newEntry = new Object();
                                    newEntry.FileRepoPath = row.RepoPathName; // STRING
                                    newEntry.User = row.User; // STRING
                                    newEntry.Password = row.Password; // STRING
                                    newEntry.GitRepoURL = row.GitRepoURL; // STRING
                                    newEntry.FileRepository = row.FileRepository; // STRING
                                    newEntry.CommitUser = row.CommitName; // STRING
                                    newEntry.CommitEmail = row.CommitEmail; // STRING
                                    newEntry.InitialBranch = row.BranchName;
                                    
                                    result.AddRow(newEntry);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetFilteredDirectoryListing">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                    	tableName: "Configuration" /* STRING */
                                    };
                                    
                                    // result: INFOTABLE dataShape: "undefined"
                                    var cfg = me.GetConfigurationTable(params);
                                    
                                    var strRepo = cfg.FileRepository;
                                    var str_RepoPath = cfg.RepoPathName;
                                    var params2 = {
                                    	inclusive: true /* BOOLEAN */,
                                    	fieldName: "parentPath" /* STRING */,
                                    	t: Things[strRepo].GetDirectoryStructure() /* INFOTABLE */,
                                        pattern:"^"+str_RepoPath+".*$"
                                    };
                                    
                                    // result: INFOTABLE
                                    var result = Resources["InfoTableFunctions"].RegexFilter(params2);
                                    // FileSystemDirectory entry object
                                    var newEntry = new Object();
                                    newEntry.path = str_RepoPath; // STRING [Primary Key]
                                    newEntry.parentPath = "/"; // STRING
                                    newEntry.name = str_RepoPath.replace("/",""); // STRING
                                    result.AddRow(newEntry);
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetRepoPathName">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // table: INFOTABLE dataShape: ""
                                    var table =  me.GetConfigurationTable({
                                    	tableName: "Configuration" /* STRING */
                                    });
                                    result = table.RepoPathName;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetRepositoryName">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    // table: INFOTABLE dataShape: ""
                                    var table =  me.GetConfigurationTable({
                                    	tableName: "Configuration" /* STRING */
                                    });
                                    result = table.FileRepository;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="HasRows">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var result = (infotable.getRowCount()) >= 1 ? false : true;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="QueryDiffFileList">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var iftbl_FileList =  me.GetCommitInfo({CommitID: CommitID }).getRow(0).ChangedFiles;
                                    if (iftbl_FileList!=undefined)
                                    {
                                    if (FileName==undefined) FileName="";
                                    var query = {
                                      "filters": {
                                        "fieldName": "FileName",
                                        "type": "LIKE",
                                        "value": "*"+FileName+"*"
                                      }
                                    };
                                    
                                    var params = {
                                    	t: iftbl_FileList /* INFOTABLE */,
                                    	query: query /* QUERY */
                                    };
                                    
                                    // result: INFOTABLE
                                    var result = Resources["InfoTableFunctions"].Query(params);
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="QueryStatus">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var iftbl_Status = Things[me.name].Status();
                                    var query = {
                                      "filters": {
                                        "fieldName": "File",
                                        "type": "LIKE",
                                        "value": "*"+SearchTerm+"*"
                                      }
                                    };
                                    if (SearchTerm&&SearchTerm!="")
                                    {
                                    var params = {
                                    	t: iftbl_Status /* INFOTABLE */,
                                    	query: query /* QUERY */
                                    };
                                    
                                    // result: INFOTABLE
                                    var result = Resources["InfoTableFunctions"].Query(params);
                                    }
                                    else
                                        result=iftbl_Status;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RemoveEntityHistoryInfo">
                    <ConfigurationTables>
                        <ConfigurationTable
                         description="Script"
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    var params = {
                                    	tableName: "Configuration" /* STRING */
                                    };
                                    
                                    var cfg = me.GetConfigurationTable(params);
                                    var strRepo = cfg.FileRepository;
                                    var str_RepoPath = cfg.RepoPathName;
                                    
                                    //get all files that have been exported for this project and clean out history info
                                    // result: INFOTABLE dataShape: "FileSystemDirectory"
                                    var dirs = Things[strRepo].ListDirectories({
                                    	path: "/"+str_RepoPath /* STRING */,
                                    	nameMask: undefined /* STRING */
                                    });
                                    
                                    for (var x=0; x < dirs.rows.length; x++) {
                                        var dir = dirs.rows[x];
                                        //may use GetEntityExportListing here; ListFiles can be used with remote repositories as well
                                        // GetEntityExportListing may be safer when also handling Data exports!
                                        var files =  Things[strRepo].ListFiles({
                                            path: dir.path /* STRING */,
                                            nameMask: "*.xml" /* STRING */
                                        });
                                        for (var xx=0; xx < files.rows.length; xx++) {
                                            var path = files.rows[xx].path;
                                            var content =  Things[strRepo].LoadXML({
                                                path: path /* STRING */
                                            });
                                            var history = content..ConfigurationChanges;
                                            delete content..ConfigurationChanges;
                                            var lastModifTS = content.*.*.@lastModifiedDate;
                                            delete content.*.*.@lastModifiedDate;
                                             Things[strRepo].SaveXML({
                                                path: path /* STRING */,
                                                content: content /* XML */
                                            });
                                            if(history && history.length()>0){
                                                history.@lastModifiedDate=lastModifTS;
                                                Things[strRepo].SaveXML({
                                                    path: path+".history" /* STRING */,
                                                    content: history[0] /* XML */
                                                });
                                                //TODO: create incremental change files
                                                //parked because the handling in the SCM systems is not clear - you may want to add commit comments 
                                                //based on last commit date and compare it to the change dates inside the xml of the .history file  
                                            }
                                        }
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
